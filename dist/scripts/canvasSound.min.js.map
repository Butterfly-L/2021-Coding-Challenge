{"version":3,"sources":["canvasSound.js"],"names":["container","document","getElementById","file","canvas","width","window","innerWidth","height","innerHeight","ctx","getContext","audioSource","analyser","drawVisualiser","bufferLength","x","barWidth","barHeight","dataArray","i","red","green","blue","fillStyle","fillRect","save","font","fillText","translate","restore","addEventListener","audio1","src","audioContext","AudioContext","play","createMediaElementSource","createAnalyser","connect","destination","fftSize","frequencyBinCount","Uint8Array","animate","clearRect","getByteFrequencyData","requestAnimationFrame","files","this","URL","createObjectURL","load"],"mappings":"AAAA,MAAMA,UAAYC,SAASC,eAAe,aACpCC,KAAOF,SAASC,eAAe,cAC/BE,OAASH,SAASC,eAAe,WACvCE,OAAOC,MAAQC,OAAOC,WACtBH,OAAOI,OAASF,OAAOG,YACvB,MAAMC,IAAMN,OAAOO,WAAW,MAW9B,IAAIC,YACAC,SAuEJ,SAASC,eAAeC,EAAaC,EAAGC,EAAUC,EAAWC,GAgBzD,IAAI,IAAIC,EAAI,EAAGA,EAAEL,EAAcK,IAAI,CAE/B,MAAMC,EAAMD,GADZF,EAAYC,EAAUC,IACI,GACpBE,EAAU,EAAFF,EACRG,EAAOL,EAAU,GACvBR,IAAIc,UAAY,OAAOH,EAAI,IAAIC,EAAM,IAAIC,EAAK,IAC9Cb,IAAIe,SAASrB,OAAOC,MAAO,EAAIW,EAAGZ,OAAOI,OAASU,EAAWD,EAAUC,GACvEF,GAAKC,EAGT,IAAI,IAAIG,EAAI,EAAGA,EAAEL,EAAcK,IAAI,CAE/B,MAAMC,EAAMD,GADZF,EAAYC,EAAUC,IACI,GACpBE,EAAU,GAAFF,EACRG,EAAOL,EAAU,GACvBR,IAAIc,UAAY,OAAOH,EAAI,IAAIC,EAAM,IAAIC,EAAK,IAC9Cb,IAAIe,SAAST,EAAGZ,OAAOI,OAASU,EAAWD,EAAUC,GACrDF,GAAKC,GAlHbP,IAAIgB,OACJhB,IAAIiB,KAAK,4BACTjB,IAAIc,UAAY,QAChBd,IAAIkB,SAAS,WAAY,GAAI,KAC7BlB,IAAIkB,SAAS,UAAW,GAAI,KAC5BlB,IAAImB,UAAUzB,OAAOC,MAAM,EAAED,OAAOC,MAAM,GAC1CK,IAAIoB,UAMJ9B,UAAU+B,iBAAiB,SAAQ,WAC/B,MAAMC,EAAS/B,SAASC,eAAe,UACvC8B,EAAOC,IAAM,8GACb,MAAMC,EAAe,IAAIC,aACzBH,EAAOI,OACPxB,YAAcsB,EAAaG,yBAAyBL,GACpDnB,SAAWqB,EAAaI,iBACxB1B,YAAY2B,QAAQ1B,UACpBA,SAAS0B,QAAQL,EAAaM,aAG9B3B,SAAS4B,QAAU,GACnB,MAAM1B,EAAeF,SAAS6B,kBACxBvB,EAAY,IAAIwB,WAAW5B,GAG3BE,EAAYb,OAAOC,MAAM,EAAKU,EACpC,IACIC,GAEJ,SAAS4B,IACL5B,EAAE,EACFN,IAAImC,UAAU,EAAE,EAAEzC,OAAOC,MAAOD,OAAOI,QACvCK,SAASiC,qBAAqB3B,GAE9BL,eAAeC,EAJb,EAI6BE,EAR/BC,UAQoDC,GAEpD4B,sBAAsBH,GAK1BA,MAGJzC,KAAK4B,iBAAiB,UAAU,WAC5B,MAAMiB,EAAQC,KAAKD,MACbhB,EAAS/B,SAASC,eAAe,UACvC8B,EAAOC,IAAMiB,IAAIC,gBAAgBH,EAAM,IACvChB,EAAOoB,OACPpB,EAAOI,OAEPxB,YAAcsB,aAAaG,yBAAyBL,GACpDnB,SAAWqB,aAAaI,iBACxB1B,YAAY2B,QAAQ1B,UACpBA,SAAS0B,QAAQL,aAAaM,aAC9B3B,SAAS4B,QAAU,GACnB,MAAM1B,EAAeF,SAAS6B,kBACxBvB,EAAY,IAAIwB,WAAW5B,GAE3BE,EAAWb,OAAOC,MAAQU,EAChC,IACIC,GAEJ,SAAS4B,IACL5B,EAAE,EACFN,IAAImC,UAAU,EAAE,EAAEzC,OAAOC,MAAOD,OAAOI,QACvCK,SAASiC,qBAAqB3B,GAC9BL,eAAeC,EAHb,EAG6BE,EAP/BC,UAOoDC,GAEpD4B,sBAAsBH,GAI1BA","file":"canvasSound.min.js","sourcesContent":["const container = document.getElementById('container');\nconst file = document.getElementById('fileupload');\nconst canvas = document.getElementById('canvas1');\ncanvas.width = window.innerWidth;\ncanvas.height = window.innerHeight;\nconst ctx = canvas.getContext('2d');\n\nctx.save();\nctx.font=\"32px 'Ubuntu', sans-serif\";\nctx.fillStyle = 'white';\nctx.fillText('點擊畫面播放音樂', 30, 100);\nctx.fillText('或上傳新的檔案', 30, 150);\nctx.translate(canvas.width/2,canvas.width/2);\nctx.restore();\n\n\nlet audioSource;\nlet analyser;\n\ncontainer.addEventListener('click',function(){\n    const audio1 = document.getElementById('audio1');\n    audio1.src = 'https://cdn.pixabay.com/download/audio/2021/05/01/audio_f88aa31493.mp3?filename=tech-house-loop-01-4230.mp3'\n    const audioContext = new AudioContext();\n    audio1.play();\n    audioSource = audioContext.createMediaElementSource(audio1);//接收元素\n    analyser = audioContext.createAnalyser();//獲取音頻時間和頻率數據\n    audioSource.connect(analyser);\n    analyser.connect(audioContext.destination); //音頻最終輸出目標，通常是指最終端的電腦喇吧，連結才會聽到聲音\n    //下面三行是計算音頻節點的\n    //會創造出一個陣列\n    analyser.fftSize = 64;//快速傅立葉變換，決定音頻譜的密度\n    const bufferLength = analyser.frequencyBinCount; //fftSize的一半\n    const dataArray = new Uint8Array(bufferLength); //將每個字節視為0-255單個數字\n    //https://zh.javascript.info/arraybuffer-binary-arrays\n\n    const barWidth = (canvas.width/2) / bufferLength;\n    let barHeight;\n    let x;\n\n    function animate(){\n        x=0;\n        ctx.clearRect(0,0,canvas.width, canvas.height);\n        analyser.getByteFrequencyData(dataArray);\n\n        drawVisualiser(bufferLength,x, barWidth, barHeight, dataArray);\n\n        requestAnimationFrame(animate);\n\n\n    }\n\n    animate();\n});\n\nfile.addEventListener('change', function(){\n    const files = this.files;\n    const audio1 = document.getElementById('audio1');\n    audio1.src = URL.createObjectURL(files[0]);\n    audio1.load();\n    audio1.play();\n\n    audioSource = audioContext.createMediaElementSource(audio1);\n    analyser = audioContext.createAnalyser();\n    audioSource.connect(analyser);\n    analyser.connect(audioContext.destination); \n    analyser.fftSize = 64;\n    const bufferLength = analyser.frequencyBinCount;\n    const dataArray = new Uint8Array(bufferLength);\n\n    const barWidth = canvas.width / bufferLength;\n    let barHeight;\n    let x;\n\n    function animate(){\n        x=0;\n        ctx.clearRect(0,0,canvas.width, canvas.height);\n        analyser.getByteFrequencyData(dataArray);\n        drawVisualiser(bufferLength,x, barWidth, barHeight, dataArray);\n\n        requestAnimationFrame(animate);\n\n    }\n\n    animate();\n    \n});\n\n\nfunction drawVisualiser(bufferLength,x, barWidth, barHeight, dataArray){\n    \n    // 1.中心圓的\n    // for(let i = 0; i<bufferLength; i++){\n    //     barHeight = dataArray[i];\n    //     ctx.save(); //將當前狀態保存, 不保存的話下面的圖案都會跟著上一個的參數旋轉\n    //     ctx.translate(canvas.width/2, canvas.height/2);\n    //     ctx.rotate(i * Math.PI * 2 / bufferLength);\n    //     const hue = i * 3 ;\n    //     ctx.fillStyle = 'hsl('+hue+',100%, 50%)';\n    //     ctx.fillRect(0, 0, barWidth, barHeight);\n    //     ctx.restore(); //取出原來所保存狀態\n    //     // save & restore說明：https://blog.csdn.net/tiankongcheng6/article/details/83000247\n    // }\n\n    //2. 柱狀的\n    for(let i = 0; i<bufferLength; i++){\n        barHeight = dataArray[i];\n        const red = i * barHeight/10;\n        const green = i*4;\n        const blue = barHeight/10;\n        ctx.fillStyle = 'rgb('+red+','+green+','+blue+')';\n        ctx.fillRect(canvas.width /2 - x, canvas.height - barHeight, barWidth, barHeight);\n        x += barWidth;\n    }\n\n    for(let i = 0; i<bufferLength; i++){\n        barHeight = dataArray[i];\n        const red = i * barHeight/10;\n        const green = i*20;\n        const blue = barHeight/10;\n        ctx.fillStyle = 'rgb('+red+','+green+','+blue+')';\n        ctx.fillRect(x, canvas.height - barHeight, barWidth, barHeight);\n        x += barWidth;\n    }\n\n}"]}